Коротко задачу можно описать так:
1) Есть магазин, например Ашан. В магазине есть система видеонаблюдения и специальная комнатка 
где сидят операторы этого процесса. 
Они просматривают торговый зал и если видят подозрительного клиента или действие 
(например, кто-то прячет колбасу в карман) , то сообщают охране у кассовой зоны что-то типа 
"Вася, проверь этого в желтой майке на кассе 4". Это их основная задача.
Какая-то часть товаров в магазине промаркирована противокражными этикетками, 
которые деактивируются на кассе, но это не весь спектр товара
В кассовой зоне стоят противокражные системы, которые кричат-пищат при попытке 
вынести товар с активным датчиком/этикеткой. 
Эти системы НЕ подключены к системе видеонаблюдения и нет возможности о
перативного информирования операторов видеонаблюдения. 
Тревожные сигналы систем они не видят и не слышат.
Задача №1 - передать информацию о тревожных ситеациях в комнатку видеонаблюдения так, 
чтобы они могли что-то предпринимать дальше (у них есть весь видеоархив)

Задача №2 - дать возможность из комнатки видеонаблюдения инициировать сигнал тревоги 
на определенной противокражной системе и таким образом повод для проверки на выходе 
подозрительных клиентов

Задача №3 - отобразить текущее состояние противокражных систем 
(для начала хотя-бы на уровне включена/выключена) 
чтобы операторы видеонаблюдения знали какие кассовые проходы функционируют нормально, 
а за какими следует присматривать повнимательнее.



2) Противокражные системы имеют на борту вайфай-устройство. Время от времени они "ходят" на свой сервер (не локальный) и отдают текущие какие-то данные (количество сработок, результаты диагностики, уровни электромагнитных шумов и всё такое подобное) Этот процесс происходит сеансово по мере появления новых данных, обычно раз в 5-10 минут. Также через это соединение осуществляется инженерный доступ (поднастроить что-то при необходимости, но это происходит довольно редко). Всё остальное время системы могут осуществлять соединения с каким-то другим сервисом и передавать текущую информацию.
Передача информации на сервер происходит сеансово: открыл сокет - представился - поздоровался - выдал обновлённые данные - если нет запроса на инженерный доступ - закрыл сокет. Как правило, вместе с установлением SSL соединения это занимает 200-300мс. Есть особенность в используемых вайфай модулях - одновременно может быть открыт только один (!) SSL сокет и никаких соединений параллельно.
В остальное время система может обращаться к локальному (или не очень) хосту и при помощи открытого соединения сообщать своё состояние, например: раз в секунду открыл сокет - отправил 2-3 параметра в JSON - подождал 100-200 мс - если ничего не получил в ответ - закрыл сокет.


3) В противокражных системах реализована только клиентская сторона, 
поскольку они "висят" на динамических адресах и вообще, сеть магазина обычно не даёт устойчивых соединений.


Например, сейчас система общается с локальным сервером как-то так:
Content-Type: application/json
Content-Length: 51
{"name":"BHost Iridium RF v5","id":"5","alarm":"3"}


Но можем сделать и как-то по-другому.


У каждой системы в магазине есть свой ID/номер (обычно соответствует номеру кассы)
Для Ашана наши польские партнёры написали какую-то прогу на Raspberry pi и выглядит это как-то так (мне, например,  не нравится):

Дополнительно:
- наши устройства пропинговать нельзя, т.к. а - неизвестно где они, б - ICMP echo отключен принудительно,
- устройство в общем случае "лезет в мозги" к центральной плате противокражной системы
 (стороннего производителя), достаёт оттуда данные, например, в виде счётчика тревог и 
 передаёт эту информацию дальше, где она может понадобиться в "сыром" виде. 
 Поэтому мы передаём текущее значение счётчика событий, а не факт его приращения. 
 То есть если пришло  {"name":"BHost Iridium RF v5","id":"5","alarm":"3"}, 
 а через секунду {"name":"BHost Iridium RF v5","id":"5","alarm":"4"} или "5", 
 то за предыдущую секунду была тревога, или две, но для отображения за секунду это не важно. 
 Общие значения параметра им тоже могут понадобиться для статистики

 на стороне сервера мы никогда не знаем, что система отвалилась и причину этого. Для себя мы знаем время, когда выключилось питание, но, правда, без питания этого не можем сказать. А "отлупы" при попытке установления соединения тоже не анализируем, поскольку не можем знать что случилось на объекте с сетью (или сервером?)
Предлагаю, зная то, что нормально система приходит раз в секунду, её отсутствие ловить по таймаутам.

В торговых центрах обычно с беспроводкой полный беспредел, соединения спокойно отваливаются 
на 5-10 секунд, сокеты добровольно не закрываются, только по таймаутам.... 
У нас алгоритм такой: знаем две сети - основную и резервную (если есть), 
если нашли основную и угадали пароль (их часто меняют, а нам не говорят), 
то держимся за неё, пока не придёт время что-то отдать на внешний сервер (може быть раз в 5-10 минут), 
если не можем установить соединение (DNS не доступен или просто нет внешнего канала), т
о отключаемся от основной и ищем резервную. Если там всё хорошо, то держимся за неё, если нет, 
то опять на основную.... И так по кругу.

Тут надо сразу оставить какие-то возможности дополнительно, 
хотя бы потому что у охраны в супермаркете есть своё начальство, которое рано или поздно захочет 
получить или дополнительный объём информации или отчёты какие-то...это же квартальная премия)))



==========================
По статусам устройств ( в зависимости от таймата ответа )
1. Все отлично - двойная зеленая галочка
2. Все отлично, прошло немного времени, но это в пределах допустимого  - зеленая галочка
3. Ожидаем - время ответа задержалось - знак вопроса в ромбике
4. Нет отклика - часы
5. Тревога - звонок
6. Не отслеживаем. То есть, известно что устройство поломано или еще какие-то причины, но оно остается в базе. Чтобы не отвлекаться на него - закрытй глаз

По каждому из статусов будет в настройках выставляться время в секундах



Список устройств
	- по нажатию на иконку можно было бы выдвать страницу с подробной статистикой по нему
	- по каждому датчику можно поставить заметку
 


